name: "Wails Build Action"
description: "Creates a wails binary"

inputs:
  build-platform:
    description: "Platform to build for"
    required: false
    default: "darwin/universal"
  wails-version:
    description: "Wails version to use"
    required: false
    default: "latest"
  go-version:
    description: "Version of Go to use"
    required: false
    default: "1.17"
  node-version:
    description: "Node js version"
    required: false
    default: "16.x"
  deno-build:
    description: "This gets run into bash, use the full command"
    required: false
    default: ""
  deno-working-directory:
    description: "This gets run into bash, use the full command"
    required: false
    default: "."
  deno-version:
    description: "Deno version to use"
    required: false
    default: "v1.20.x"

runs:
  using: "composite"
  steps:
    # Setup and configure GoLang
    - name: Setup GoLang
      uses: actions/setup-go@v2
      with:
        go-version: ${{inputs.go-version}}
    - name: Setup Go Cache
      uses: actions/cache@v3
      with:
        path: |
          %LocalAppData%\go-build
          ~\go\pkg\mod
          ~/Library/Caches/go-build
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    # Setup and configure NodeJS
    - name: Setup NodeJS
      uses: actions/setup-node@v2
      with:
        node-version: ${{inputs.node-version}}
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - name: Setup NodeJS cache
      uses: actions/cache@v3
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    # (Optional) Setup and configure Deno
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      if: ${{inputs.deno-build}} != ''
      with:
        deno-version: ${{inputs.deno-version}}
    - name: Setup Deno Cache
      uses: actions/cache@v3
      if: ${{inputs.deno-build}} != ''
      with:
        path: |
          ~/.deno
          ~/.cache/deno
          ~/Library/Caches/deno
          ~\.deno
          %LocalAppData%\deno
        key: ${{ runner.os }}-deno-${{ hashFiles('**/deps.ts') }}
    - name: Run Deno Command
      if: ${{inputs.deno-build}} != ''
      shell: bash
      working-directory: ${{inputs.deno-working-directory}}
      run: ${{inputs.deno-build}}
    # install wails
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@${{inputs.wails-version}}
      shell: bash
    - name: Install Linux Wails deps
      if: ${{ runner.os }} == 'Linux'
      run: sudo apt-get update && sudo apt-get install libgtk-3-0 libwebkit2gtk-4.0-dev
      shell: bash
    - name: Install macOS Wails deps
      if: ${{ runner.os }} == 'macOS'
      run: brew install mitchellh/gon/gon
      shell: bash
    - name: Build App
      run: wails build --platform ${{inputs.build-platform}}
      shell: bash
    - name: Add macOS perms
      if: ${{ runner.os }} == 'macOS'
      run: chmod +x build/bin/*/Contents/MacOS/*
      shell: bash
    - name: Add Linux perms
      if: ${{ runner.os }} == 'Linux'
      run: chmod +x build/bin/*
      shell: bash